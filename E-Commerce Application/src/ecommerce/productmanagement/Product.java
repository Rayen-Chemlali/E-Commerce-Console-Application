package ecommerce.productmanagement;
import java.util.HashMap;
import java.util.Scanner;
import ecommerce.promotionservice.*;

public class Product {
    private int productId;
    //key=username(that can be anonymous)/value=ProductFeedback
    private HashMap<String, ProductFeedback> Feedbacks;
    private float generalRating;
    private String name;
    private String description;
    ProductCategory category;
    private double price;
    private double priceOutOfPromotion;
    private int stockQuantity;
    private String brand;
    private boolean availability;
    private int numberOfSales;
    //constructor with user input (the id is generated by the product manager)
    public Product(int productId) {
        this.productId = productId;
        Feedbacks = new HashMap<>();
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter product name: ");
        this.name = scanner.nextLine();

        System.out.print("Enter product description: ");
        this.description = scanner.nextLine();

        System.out.print("Enter product category: ");
        String categoryName = scanner.nextLine();
        while (!ProductManager.isCategoryExistant(categoryName)) {
            System.out.print("This Category does not exist.Enter an existing product category: ");
            categoryName = scanner.nextLine();
        }
        this.category = ProductManager.getCategory(categoryName);


        System.out.print("Enter product price: ");
        this.price = scanner.nextDouble();

        System.out.print("Enter product stock quantity: ");
        this.stockQuantity = scanner.nextInt();

        scanner.nextLine();

        System.out.print("Enter product brand: ");
        this.brand = scanner.nextLine();

        System.out.print("Is the product available? (true/false): ");
        this.availability = scanner.nextBoolean();

        category.addProduct(this);
        this.numberOfSales=0;

        priceOutOfPromotion=price;

    }
//another constructor with parameters
    public Product(int productId, String name, String description, String categoryName, double price, int stockQuantity, String brand, boolean availability) {
        this.productId = productId;
        Feedbacks = new HashMap<>();
        this.name = name;
        this.description = description;
        this.category = ProductManager.getCategory(categoryName);
        this.price = price;
        this.stockQuantity = stockQuantity;
        this.brand = brand;
        this.availability = availability;
        category.addProduct(this);
        this.numberOfSales = 0;
        this.priceOutOfPromotion=price;
    }

    public int getProductId() {
        return productId;
    }

    public void setProductId(int productId) {
        this.productId = productId;
    }

    public float getGeneralRating() {
        return generalRating;
    }

    public void setGeneralRating(float generalRating) {
        this.generalRating = generalRating;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public ProductCategory getCategory() {
        return category;
    }

    public void setCategory(ProductCategory category) {
        this.category = category;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public double getPriceOutOfPromotion() {
        return priceOutOfPromotion;
    }

    public void setPriceOutOfPromotion(double priceOutOfPromotion) {
        this.priceOutOfPromotion = priceOutOfPromotion;
    }

    public int getStockQuantity() {
        return stockQuantity;
    }

    public void setStockQuantity(int stockQuantity) {
        this.stockQuantity = stockQuantity;
    }

    public String getBrand() {
        return brand;
    }

    public void setBrand(String brand) {
        this.brand = brand;
    }

    public boolean isAvailability() {
        return availability;
    }

    public void setAvailability(boolean availability) {
        this.availability = availability;
    }

    public int getNumberOfSales() {
        return numberOfSales;
    }

    public void setNumberOfSales(int numberOfSales) {
        this.numberOfSales = numberOfSales;
    }

    public void addFeedbacks() {
        ProductFeedback feedback = new ProductFeedback();
        Feedbacks.put(feedback.getUsername(), feedback);
        this.updateGeneralRating();
    }

    public void viewFeedbacks() {
        System.out.println("Feedbacks:");
        for (String username : Feedbacks.keySet()) {
            System.out.println(username + ":");
            System.out.println("Review: " + Feedbacks.get(username).getReview());
            System.out.println("Rating: " + Feedbacks.get(username).getRating());
        }
    }

    public void updateGeneralRating() {
        float newGeneralRating = 0;
        for (String username : Feedbacks.keySet()) {
            newGeneralRating += Feedbacks.get(username).getRating();
        }
        this.generalRating = newGeneralRating / Feedbacks.keySet().size();

    }

    public void decreaseInStock(int quantity) {
        if (stockQuantity > quantity) {
            this.stockQuantity-=quantity;
            if (stockQuantity == 0) {
                this.availability = false;
            }
        } else {
            System.out.println("Insufficient quantity in stock");
        }
    }
    public void increaseNumberOfSales(int newSales)
    {
        this.numberOfSales+=newSales;
    }
    public void updateProduct() {
        Scanner scanner = new Scanner(System.in);
        boolean continueUpdating = true;

        while (continueUpdating) {
            System.out.println("Choose what you want to update:");
            System.out.println("1. Name");
            System.out.println("2. Description");
            System.out.println("3. Category");
            System.out.println("4. Price");
            System.out.println("5. Stock Quantity");
            System.out.println("6. Brand");
            System.out.println("7. Availability");
            System.out.println("8. Number of sales");
            System.out.println("9. Exit");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    System.out.print("Enter new product name: ");
                    this.name = scanner.nextLine();
                    break;
                case 2:
                    System.out.print("Enter new product description: ");
                    this.description = scanner.nextLine();
                    break;
                case 3:
                    System.out.print("Enter new product category: ");
                    String newCategoryName = scanner.nextLine();
                    while (!ProductManager.isCategoryExistant(newCategoryName)) {
                        System.out.print("This category does not exist. Enter an existing product category: ");
                        newCategoryName = scanner.nextLine();
                    }
                    this.category.removeProduct(this.productId);
                    this.category = ProductManager.getCategory(newCategoryName);
                    this.category.addProduct(this);
                    break;
                case 4:
                    System.out.print("Enter new product price: ");
                    this.price = scanner.nextDouble();
                    break;
                case 5:
                    System.out.print("Enter new product stock quantity: ");
                    this.stockQuantity = scanner.nextInt();
                    break;
                case 6:
                    System.out.print("Enter new product brand: ");
                    this.brand = scanner.nextLine();
                    break;
                case 7:
                    System.out.print("Is the product available? (true/false): ");
                    this.availability = scanner.nextBoolean();
                    break;
                case 8:
                    System.out.print("Enter new number of sales: ");
                    this.numberOfSales= scanner.nextInt();
                    break;
                case 9:
                    continueUpdating = false;
                    break;
                default:
                    System.out.println("Invalid choice. Please choose a valid option.");
            }
        }
    }
    public void showAllProductDetails()
    {
        System.out.println("Product ID: " + productId);
        System.out.println("Name: " + name);
        System.out.println("Description: " + description);
        System.out.println("Category: " + category.getCategoryName());
        System.out.println("Price: " + price+" DT");
        System.out.println("Brand: " + brand);
        System.out.println("Availability: " + availability);
        System.out.println("Number of Sales: " + numberOfSales);
        System.out.println("Quantity in stock: " + stockQuantity);
        System.out.println("General Rating: " + generalRating);
        this.viewFeedbacks();
    }
    public String getNecessaryProductDetails() {
        String promotion="";
        if( PromtionManager.isInPromtion(productId))
        {
            promotion="Product in promotion"+Double.toString(PromtionManager.getPromtion(productId))+" %";
        }
        return  Integer.toString(productId)+"."+name + "\nPrice: " + price + " dt|Brand: " + brand + "\n"+promotion ;

    }
    public void showAllProductDetailsForCustomer()
    {
        System.out.println(name);
        System.out.println("Description: " + description);
        System.out.println("Category: " + category.getCategoryName());
        System.out.println("Price: " + price+" DT");
        System.out.println("Brand: " + brand);
        System.out.println("Availability: " + availability);
        System.out.println("General Rating: " + generalRating);
        this.viewFeedbacks();
    }
}
